# in reality, we only package select libraries from the previous major LLVM version in order to make upgrades easier
pkgname=llvm-compat
pkgver=12.0.1
pkgrel=0
pkgdesc="$pkgname $pkgver (libs only)"
arch="all"
url=https://llvm.org
license=.

case $CARCH in
        x86_64) _targets="all" _linker="lld" lld="ON";;
        aarch64) _targets="all" _linker="lld" lld="ON";;
        ppc64*) _targets="all" _linker="lld" lld="ON";;
        mips64*) _targets="Mips" _linker="lld" lld="ON";;
        riscv64) _targets="RISCV" _linker="lld" lld="ON";;
        *) echo "Unknown arch" ; return 1 ;;
esac

source="https://github.com/llvm/llvm-project/archive/llvmorg-${pkgver/_/-}.tar.gz"

builddir=$srcdir/llvm-project-llvmorg-${pkgver/_/-}
_builddir="$srcdir/build"
_projects="llvm"

makedepends="cmake llvm-dev ncurses-dev libedit-dev samurai elfutils elfutils-dev libffi-dev perl python3-dev zlib-dev linux-dev"

prepare() {
	default_prepare

	mkdir -p $_builddir && cd $_builddir

	cmake -G Ninja -Wno-dev \
			-DCMAKE_C_COMPILER=$CC \
			-DCMAKE_CXX_COMPILER=$CXX \
			-DCMAKE_C_COMPILER_TARGET=$CTARGET \
			-DCMAKE_CXX_COMPILER_TARGET=$CTARGET \
			-DCMAKE_C_FLAGS="$CFLAGS" \
			-DCMAKE_CXX_FLAGS="$CXXFLAGS" \
			-DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
			-DCMAKE_INSTALL_PREFIX=/usr \
			-DCMAKE_BUILD_TYPE=Release \
			-DLLVM_VERSION_SUFFIX="" \
			-DLLVM_APPEND_VC_REV=OFF \
			-DLLVM_ENABLE_PROJECTS="$_projects" \
			-DLLVM_ENABLE_LLD=$lld \
			-DLLVM_TARGETS_TO_BUILD="$_targets" \
			-DLLVM_INSTALL_BINUTILS_SYMLINKS=OFF \
			-DLLVM_INCLUDE_EXAMPLES=OFF \
			-DLLVM_ENABLE_PIC=ON \
			-DLLVM_ENABLE_LTO=OFF \
			-DLLVM_INCLUDE_GO_TESTS=OFF \
			-DLLVM_INCLUDE_TESTS=OFF \
			-DLLVM_HOST_TRIPLE=$CTARGET \
			-DLLVM_DEFAULT_TARGET_TRIPLE=$CTARGET \
			-DLLVM_ENABLE_LIBXML2=OFF \
			-DLLVM_ENABLE_ZLIB=ON \
			-DLLVM_BUILD_LLVM_DYLIB=ON \
			-DLLVM_LINK_LLVM_DYLIB=ON \
			-DLLVM_OPTIMIZED_TABLEGEN=ON \
			-DLLVM_INCLUDE_BENCHMARKS=OFF \
			-DLLVM_INCLUDE_DOCS=OFF \
			-DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_MC_DISASSEMBLE_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_GO_BUILD=OFF \
			-DLLVM_INSTALL_UTILS=ON \
			-DLLVM_ENABLE_LIBCXX=ON \
			-DLLVM_STATIC_LINK_CXX_STDLIB=ON \
			-DLIBCXX_ENABLE_FILESYSTEM=ON \
			-DLIBCXX_USE_COMPILER_RT=ON \
			-DLIBCXX_HAS_MUSL_LIBC=ON \
			-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
			-DLIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY=ON \
			-DLIBCXX_STATICALLY_LINK_ABI_IN_STATIC_LIBRARY=ON \
			-DLIBCXX_INSTALL_LIBRARY=OFF \
			-DLIBCXXABI_ENABLE_ASSERTIONS=ON \
			-DLIBCXXABI_USE_COMPILER_RT=ON \
			-DLIBCXXABI_USE_LLVM_UNWINDER=ON \
			-DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
			-DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY=YES \
			-DLIBCXXABI_ENABLE_SHARED=OFF \
			-DLIBCXXABI_ENABLE_STATIC=ON \
			-DLIBCXXABI_INSTALL_LIBRARY=OFF \
			-DLIBUNWIND_ENABLE_SHARED=OFF \
			-DLIBUNWIND_ENABLE_STATIC=ON \
			-DLIBUNWIND_INSTALL_LIBRARY=OFF \
			-DLIBUNWIND_USE_COMPILER_RT=ON \
			-DCLANG_DEFAULT_LINKER=$_linker \
			-DCLANG_DEFAULT_CXX_STDLIB='libc++' \
			-DCLANG_DEFAULT_RTLIB=compiler-rt \
			-DCLANG_DEFAULT_UNWINDLIB=libunwind \
			-DCLANG_VENDOR="Abyss OS" \
			-DCLANG_ENABLE_STATIC_ANALYZER=OFF \
			-DCLANG_ENABLE_ARCMT=OFF \
			-DCLANG_LINK_CLANG_DYLIB=OFF \
			-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
			-DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
			-DCOMPILER_RT_INCLUDE_TESTS=OFF \
			-DCOMPILER_RT_BUILD_SANITIZERS=OFF \
			-DCOMPILER_RT_BUILD_XRAY=OFF \
			-DCOMPILER_RT_INCLUDE_TESTS=OFF \
			-DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
            -DLLVM_USE_NEWPM=ON \
			$builddir/llvm
}

build() {
	cd $_builddir
	ninja -j${JOBS} libLLVM-${pkgver%%.*}.so
}

package() {
	cd $_builddir
	install -D $_builddir/lib/libLLVM-${pkgver%%.*}.so ${pkgdir}/usr/lib/libLLVM-${pkgver%%.*}.so
}

b2sums="f41de787bc73ff2edfda1b22cc8602be6f65f37dd9e4c8888533cfa8c3ccdcf4f108aaab9de23ab0ab987966eb160f2a553a0bdff99461e71ddd5bfcd086090d  llvmorg-12.0.1.tar.gz"

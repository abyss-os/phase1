pkgname=llvm
pkgver=12.0.1
pkgrel=2
pkgdesc="$pkgname"
arch="all"
url=https://llvm.org
license=.
source="https://github.com/llvm/llvm-project/archive/llvmorg-$pkgver.tar.gz"
subpackages="$pkgname-dev"

builddir=$srcdir/llvm-project-llvmorg-${pkgver/_/-}
_builddir="$srcdir/build"

makedepends="cmake ncurses-dev libedit-dev samurai libffi-dev python3-dev libexecinfo-dev libxml2-dev xz-dev swig llvm-bootstrap"
provides="clang $pkgname-bootstrap=$pkgver-r$pkgrel"
replaces="lld llvm-binutils"

_projects="libunwind;libcxxabi;libcxx;compiler-rt;llvm;lld;clang;clang-tools-extra;lldb"
_targets="all"
_lto=Thin
_arch_extra="-DCOMPILER_RT_BUILD_SANITIZERS=OFF -DCOMPILER_RT_BUILD_XRAY=OFF -DCOMPILER_RT_BUILD_MEMPROF=OFF -DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD=OFF
            -DLLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD=OFF -DLLVM_TOOL_LLVM_MC_DISASSEMBLE_FUZZER_BUILD=OFF -DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD=OFF
            -DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD=OFF"

case $CARCH in
        mips64*) _targets="Mips" _lto=OFF _projects="libunwind;libcxxabi;libcxx;compiler-rt;llvm;lld;clang";;
        riscv64) _lto=OFF _projects="libunwind;libcxxabi;libcxx;compiler-rt;llvm;lld;clang;clang-tools-extra";;
        x86_64) _arch_extra="-DCOMPILER_RT_BUILD_SANITIZERS=ON -DCOMPILER_RT_BUILD_XRAY=ON -DCOMPILER_RT_BUILD_MEMPROF=ON
                -DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD=ON -DLLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD=ON
                -DLLVM_TOOL_LLVM_MC_DISASSEMBLE_FUZZER_BUILD=ON -DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD=ON
                -DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD=ON";;
esac

prepare() {
	default_prepare

	mkdir -p $_builddir && cd $_builddir

	cmake -G Ninja -Wno-dev \
			-DCMAKE_C_COMPILER=$CC \
			-DCMAKE_CXX_COMPILER=$CXX \
			-DCMAKE_C_COMPILER_TARGET=$CTARGET \
			-DCMAKE_CXX_COMPILER_TARGET=$CTARGET \
			-DCMAKE_C_FLAGS="$CFLAGS" \
			-DCMAKE_CXX_FLAGS="$CXXFLAGS" \
			-DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
			-DCMAKE_INSTALL_PREFIX=/usr \
			-DCMAKE_BUILD_TYPE=Release \
			-DLLVM_VERSION_SUFFIX="" \
			-DLLVM_APPEND_VC_REV=OFF \
			-DLLVM_ENABLE_PROJECTS="$_projects" \
			-DLLVM_ENABLE_LLD=ON \
			-DLLVM_TARGETS_TO_BUILD="$_targets" \
			-DLLVM_INSTALL_BINUTILS_SYMLINKS=OFF \
			-DLLVM_INSTALL_CCTOOLS_SYMLINKS=OFF \
			-DLLVM_INCLUDE_EXAMPLES=OFF \
			-DLLVM_ENABLE_PIC=ON \
			-DLLVM_ENABLE_LTO=$_lto \
			-DLLVM_INCLUDE_GO_TESTS=OFF \
			-DLLVM_INCLUDE_TESTS=OFF \
			-DLLVM_HOST_TRIPLE=$CTARGET \
			-DLLVM_DEFAULT_TARGET_TRIPLE=$CTARGET \
			-DLLVM_ENABLE_LIBXML2=ON \
			-DLLVM_ENABLE_ZLIB=ON \
			-DLLVM_BUILD_LLVM_DYLIB=ON \
			-DLLVM_LINK_LLVM_DYLIB=ON \
			-DLLVM_ENABLE_FFI=ON \
			-DLLVM_OPTIMIZED_TABLEGEN=ON \
			-DLLVM_INCLUDE_BENCHMARKS=OFF \
			-DLLVM_INCLUDE_DOCS=OFF \
			-DLLVM_TOOL_LLVM_GO_BUILD=OFF \
			-DLLVM_INSTALL_UTILS=ON \
			-DLLVM_ENABLE_LIBCXX=ON \
			-DLLVM_STATIC_LINK_CXX_STDLIB=ON \
			-DLIBCXX_ENABLE_FILESYSTEM=ON \
			-DLIBCXX_USE_COMPILER_RT=ON \
			-DLIBCXX_HAS_MUSL_LIBC=ON \
			-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
			-DLIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY=ON \
			-DLIBCXX_STATICALLY_LINK_ABI_IN_STATIC_LIBRARY=ON \
			-DLIBCXX_INSTALL_LIBRARY=OFF \
			-DLIBCXXABI_ENABLE_ASSERTIONS=ON \
			-DLIBCXXABI_USE_COMPILER_RT=ON \
			-DLIBCXXABI_USE_LLVM_UNWINDER=ON \
			-DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
			-DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY=YES \
			-DLIBCXXABI_ENABLE_SHARED=OFF \
			-DLIBCXXABI_ENABLE_STATIC=ON \
			-DLIBCXXABI_INSTALL_LIBRARY=OFF \
			-DLIBUNWIND_ENABLE_SHARED=OFF \
			-DLIBUNWIND_ENABLE_STATIC=ON \
			-DLIBUNWIND_INSTALL_LIBRARY=OFF \
			-DLIBUNWIND_USE_COMPILER_RT=ON \
			-DCLANG_DEFAULT_LINKER=lld \
			-DCLANG_DEFAULT_CXX_STDLIB='libc++' \
			-DCLANG_DEFAULT_RTLIB=compiler-rt \
			-DCLANG_DEFAULT_UNWINDLIB=libunwind \
			-DCLANG_VENDOR="Abyss OS" \
			-DCLANG_ENABLE_STATIC_ANALYZER=OFF \
			-DCLANG_ENABLE_ARCMT=OFF \
			-DCLANG_LINK_CLANG_DYLIB=ON \
			-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
			-DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
			-DCOMPILER_RT_INCLUDE_TESTS=OFF \
			-DCOMPILER_RT_INCLUDE_TESTS=OFF \
			-DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
			-DENABLE_EXPERIMENTAL_NEW_PASS_MANAGER=TRUE \
			-DLLVM_USE_NEWPM=ON \
            $_arch_extra \
			$builddir/llvm
}

build() {
	cd $_builddir
	ninja -j${JOBS} unwind cxxabi cxx
	ninja -j${JOBS} all
}

package() {
	cd $_builddir
	DESTDIR="$pkgdir" ninja install
    rm -rf $pkgdir/usr/include/c++ $pkgdir/usr/lib/python3.9/site-packages/six.py
}

binutils_aalt() {
    depends="$depends aalt"
    pkgdesc="$pkgdesc (AAlt registration files)"
    install_if="aalt ${subpkgname%-aalt}=$pkgver-r$pkgrel"

    for p in addr2line ar mt nm objcopy objdump ranlib readelf readobj size split strings strip
    do
        DESTDIR=$subpkgdir aalt-bin -R -g llvm -p $p -f /usr/bin/llvm-$p
    done
}

lld_aalt() {
    depends="$depends aalt"
    pkgdesc="$pkgdesc (AAlt registration files)"
    install_if="aalt ${subpkgname%-aalt}=$pkgver-r$pkgrel"

    DESTDIR=$subpkgdir aalt-bin -R -g llvm -p ld -f /usr/bin/lld
}


b2sums="f41de787bc73ff2edfda1b22cc8602be6f65f37dd9e4c8888533cfa8c3ccdcf4f108aaab9de23ab0ab987966eb160f2a553a0bdff99461e71ddd5bfcd086090d  llvmorg-12.0.1.tar.gz"

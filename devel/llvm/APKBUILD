pkgname=llvm
case $CARCH in
	*) pkgver=10.0.0;;
esac

pkgrel=1
pkgdesc="$pkgname"
arch="all"
url=.
license=.

case $CARCH in
        aarch64) _targets="AArch64" _linker="lld" lld="ON";;
        x86_64) _targets="X86" _linker="lld" lld="ON";;
        mips64) _targets="Mips" _linker="gnu-ld" lld="OFF";;
        riscv64) _targets="RISCV" _linker="lld" lld="ON";;
        ppc64le) _targets="PowerPC" _linker="gnu-ld" lld="OFF";;
        *) echo "Unknown arch" ; return 1 ;;
esac

source="https://github.com/llvm/llvm-project/archive/llvmorg-${pkgver/_/-}.tar.gz
		mips_softfloat.patch
		mips64_crt.patch
		clang-pie-ssp.patch
		lld-znow.patch
		riscv_relax.patch
		tmp-kernel.patch
		mips_fix_syscall_warning.patch"

subpackages="lld llvm-binutils:binutils $pkgname-dev"

builddir=$srcdir/llvm-project-llvmorg-${pkgver/_/-}
_builddir="$srcdir/build"
_projects="libunwind;libcxxabi;libcxx;compiler-rt;llvm;lld;clang"

depends="libcxx elfutils-libelf libffi libedit ncurses zlib"
makedepends="cmake clang lld ncurses-dev libedit-dev swig samurai elfutils-libelf elfutils-dev libffi-dev perl python3-dev zlib-dev linux-dev"

provides="clang compiler-rt llvm-bootstrap"

prepare() {
	config_helper
	mkdir -p $_builddir && cd $_builddir

	patch -p1 -d $builddir -i $srcdir/mips_softfloat.patch
	patch -p1 -d $builddir -i $srcdir/mips64_crt.patch

	patch -p1 -d $builddir -i $srcdir/clang-pie-ssp.patch
	patch -p1 -d $builddir -i $srcdir/lld-znow.patch

	patch -p1 -d $builddir -i $srcdir/riscv_relax.patch

	patch -p1 -d $builddir -i $srcdir/tmp-kernel.patch

	cmake -G Ninja -Wno-dev \
			-DCMAKE_C_COMPILER=$CC \
			-DCMAKE_CXX_COMPILER=$CXX \
			-DCMAKE_C_COMPILER_TARGET=$CTARGET \
			-DCMAKE_CXX_COMPILER_TARGET=$CTARGET \
			-DCMAKE_C_FLAGS="$CFLAGS" \
			-DCMAKE_CXX_FLAGS="$CXXFLAGS" \
			-DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
			-DCMAKE_INSTALL_PREFIX=/usr \
			-DCMAKE_BUILD_TYPE=Release \
			-DLLVM_VERSION_SUFFIX="" \
			-DLLVM_APPEND_VC_REV=OFF \
			-DLLVM_ENABLE_PROJECTS="$_projects" \
			-DLLVM_ENABLE_LLD=$lld \
			-DLLVM_TARGETS_TO_BUILD="$_targets" \
			-DLLVM_INSTALL_BINUTILS_SYMLINKS=OFF \
			-DLLVM_INCLUDE_EXAMPLES=OFF \
			-DLLVM_ENABLE_PIC=ON \
			-DLLVM_ENABLE_LTO=OFF \
			-DLLVM_INCLUDE_GO_TESTS=OFF \
			-DLLVM_INCLUDE_TESTS=OFF \
			-DLLVM_HOST_TRIPLE=$CTARGET \
			-DLLVM_DEFAULT_TARGET_TRIPLE=$CTARGET \
			-DLLVM_ENABLE_LIBXML2=OFF \
			-DLLVM_ENABLE_ZLIB=ON \
			-DLLVM_BUILD_LLVM_DYLIB=ON \
			-DLLVM_LINK_LLVM_DYLIB=ON \
			-DLLVM_OPTIMIZED_TABLEGEN=ON \
			-DLLVM_INCLUDE_BENCHMARKS=OFF \
			-DLLVM_INCLUDE_DOCS=OFF \
			-DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_MC_DISASSEMBLE_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD=OFF \
			-DLLVM_INSTALL_UTILS=ON \
			-DLLVM_ENABLE_LIBCXX=ON \
			-DLLVM_STATIC_LINK_CXX_STDLIB=ON \
			-DLIBCXX_ENABLE_FILESYSTEM=ON \
			-DLIBCXX_USE_COMPILER_RT=ON \
			-DLIBCXX_HAS_MUSL_LIBC=ON \
			-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
			-DLIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY=ON \
			-DLIBCXX_STATICALLY_LINK_ABI_IN_STATIC_LIBRARY=ON \
			-DLIBCXX_INSTALL_LIBRARY=OFF \
			-DLIBCXXABI_ENABLE_ASSERTIONS=ON \
			-DLIBCXXABI_USE_COMPILER_RT=ON \
			-DLIBCXXABI_USE_LLVM_UNWINDER=ON \
			-DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
			-DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY=YES \
			-DLIBCXXABI_ENABLE_SHARED=OFF \
			-DLIBCXXABI_ENABLE_STATIC=ON \
			-DLIBCXXABI_INSTALL_LIBRARY=OFF \
			-DLIBUNWIND_ENABLE_SHARED=OFF \
			-DLIBUNWIND_ENABLE_STATIC=ON \
			-DLIBUNWIND_INSTALL_LIBRARY=OFF \
			-DLIBUNWIND_USE_COMPILER_RT=ON \
			-DCLANG_DEFAULT_LINKER=$_linker \
			-DCLANG_DEFAULT_CXX_STDLIB='libc++' \
			-DCLANG_DEFAULT_RTLIB=compiler-rt \
			-DCLANG_DEFAULT_UNWINDLIB=libunwind \
			-DCLANG_VENDOR="Abyss OS" \
			-DCLANG_ENABLE_STATIC_ANALYZER=OFF \
			-DCLANG_ENABLE_ARCMT=OFF \
			-DCLANG_LINK_CLANG_DYLIB=OFF \
			-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
			-DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
			-DCOMPILER_RT_INCLUDE_TESTS=OFF \
			-DCOMPILER_RT_BUILD_SANITIZERS=OFF \
			-DCOMPILER_RT_BUILD_XRAY=OFF \
			-DCOMPILER_RT_INCLUDE_TESTS=OFF \
			-DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
			-DENABLE_EXPERIMENTAL_NEW_PASS_MANAGER=TRUE \
			$builddir/llvm
}

build() {
	cd $_builddir
	ninja -j${JOBS} unwind cxxabi cxx
	ninja -j${JOBS}
}

package() {
	cd $_builddir
	DESTDIR="$pkgdir" ninja install
	rm -rv ${pkgdir}/usr/include/c++
}
dev() {
	provides="clang-dev"
	replaces="clang-dev"
	default_dev
}

binutils() {
	depends="llvm"
	mkdir -p ${subpkgdir}/usr/bin
	for t in addr2line ar as mt nm objcopy objdump ranlib readelf readobj size split strings strip dlltool lib; do
		mv -v ${pkgdir}/usr/bin/llvm-${t} ${subpkgdir}/usr/bin/llvm-${t}
	done
}

lld() {
	pkgdesc="$pkgname $pkgver"
	depends="llvm"
	mkdir -p ${subpkgdir}/usr/bin ${subpkgdir}/usr/lib
	for t in ld.lld lld ld64.lld lld-link wasm-ld; do
		mv -v ${pkgdir}/usr/bin/${t} ${subpkgdir}/usr/bin/${t}
	done
	mv -v ${pkgdir}/usr/lib/libLTO* ${subpkgdir}/usr/lib/
}

lldb() {
	pkgdesc="$pkgname $pkgver"
	depends="llvm-dev python3 python3-dev"
	mkdir -p ${subpkgdir}/usr/bin ${subpkgdir}/usr/lib/python3.7
	mv -v ${pkgdir}/usr/lib/liblldb* ${subpkgdir}/usr/lib/
	mv -v ${pkgdir}/usr/bin/lldb* ${subpkgdir}/usr/bin/
	mv -v ${pkgdir}/usr/lib/python3.7/* ${subpkgdir}/usr/lib/python3.7
	rm -rf ${pkgdir}/usr/lib/python3.7 ${subpkgdir}/usr/lib/python3.7/site-packages/six.py
}

llgo() {
	pkgdesc="$pkgname $pkgver"
	depends="llvm"
	mkdir -p ${subpkgdir}/usr/bin
	mv -v ${_builddir}/bin/llvm-go ${subpkgdir}/usr/bin/
}

binutils_aalt() {
    depends="$depends aalt"
    pkgdesc="$pkgdesc (AAlt registration files)"
    install_if="aalt ${subpkgname%-aalt}=$pkgver-r$pkgrel"

    for p in addr2line ar mt nm objcopy objdump ranlib readelf readobj size split strings strip
    do
        DESTDIR=$subpkgdir aalt-bin -R -g llvm -p $p -f /usr/bin/llvm-$p
    done
}

lld_aalt() {
    depends="$depends aalt"
    pkgdesc="$pkgdesc (AAlt registration files)"
    install_if="aalt ${subpkgname%-aalt}=$pkgver-r$pkgrel"

    DESTDIR=$subpkgdir aalt-bin -R -g llvm -p ld -f /usr/bin/lld
}

b2sums="6b0254f5b913398cdcf2b2ec1ff219888706d2b79d5296590934714e42ac79f6a6547941ac2b1d2c4e6313dd18b6c7068e748aa6ac033e49fccbf5d355aa8191  llvmorg-10.0.0.tar.gz
8e23d19518bc2bba4009c30ba6d8c981e94b6e293a95a29ebbb9be7c9a7a40b21900a7e526529149847a42bd98899306a1af9b99c819e290d4a67e34f4ea32c3  mips_softfloat.patch
916376a80bde2f7c009a8ce2f8663f95c2e87271047a5476dc429ab014141fdd45689ebc5e3c4ca1cb11d3cd3255ef84d5425a8725cb91cb95f08ee6b56136c5  mips64_crt.patch
7991221eca8a3f32607de7da91c02928d95cfae8d2af3516d403d2edd1a43bf7bb97280b6584146cd9ed51123b2bfe686a460ac1035131d115207d55a7debcfa  clang-pie-ssp.patch
ada8faf1f1bbdfc52b0493ba563b91de954e6613b8be0af7deeabdf0b621a69a45e5acc753ecb487f461360bb2ec99b4f510a8872bff3afe90e9e7b91de12997  lld-znow.patch
c99d536538e3e4830c618e11214f4fdda6cf377c9ea565b254e2484e52b68202b19b921b09ef4b784897bceac8a3b7bb9331b4b0087a5cafb8a1a3518fb1a1c4  riscv_relax.patch
66835dfc1460df303d26fe7c5d630b836cbb0e1ef7c39d59695f73f69e2d12af59db72ce16b1ee16f9ff5ea7bd530a9d39b7c98c0f7c89d74c03ab212d17db9a  tmp-kernel.patch
4fa8f10fa7d6d219fc88e21d6959c2c0e54508d533e7455660ccc9c1df8dcec286bb59ad54c5c65385803683c4b331eb1977a8c5107f786959550747ca96b0db  mips_fix_syscall_warning.patch"

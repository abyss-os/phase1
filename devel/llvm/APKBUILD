pkgname=llvm

pkgver=10.0.0_rc1
pkgrel=0
pkgdesc="$pkgname"
arch="all"
url=.
license=.

case $CARCH in
        aarch64) _targets="AArch64" _linker="lld" ;;
        x86_64) _targets="X86" _linker="lld" ;;
        mips64) _targets="Mips" _linker="gnu-ld" ;;
        riscv64) _targets="RISCV" _linker="gnu-ld" ;;
        ppc64le) _targets="PowerPC" _linker="gnu-ld" ;;
        *) echo "Unknown arch" ; return 1 ;;
esac

source="https://github.com/llvm/llvm-project/archive/llvmorg-${pkgver/_/-}.tar.gz"
subpackages="lld llvm-binutils:binutils $pkgname-dev"

builddir="$srcdir/build"
_projects="llvm;lld;libcxx;libcxxabi;compiler-rt;libunwind"

depends="compiler-rt libcxx elfutils-libelf libffi libedit ncurses zlib"
makedepends="compiler-rt cmake clang lld ncurses-dev libedit-dev swig ninja elfutils-libelf elfutils-dev libffi-dev perl python3-dev zlib-dev linux-dev"

prepare() {
	default_prepare
	mkdir -p $builddir && cd $builddir

	cmake -G Ninja -Wno-dev \
			-DCMAKE_C_COMPILER=$CC \
			-DCMAKE_CXX_COMPILER=$CXX \
			-DCMAKE_C_COMPILER_TARGET=$CTARGET \
			-DCMAKE_CXX_COMPILER_TARGET=$CTARGET \
			-DCMAKE_C_FLAGS="$CFLAGS" \
			-DCMAKE_CXX_FLAGS="$CXXFLAGS" \
			-DCMAKE_INSTALL_PREFIX=/usr \
			-DCMAKE_BUILD_TYPE=Release \
			-DLLVM_VERSION_SUFFIX="" \
			-DLLVM_APPEND_VC_REV=OFF \
			-DLLVM_ENABLE_PROJECTS="$_projects" \
			-DLLVM_ENABLE_LLD=ON \
			-DLLVM_TARGETS_TO_BUILD="$_targets" \
			-DLLVM_INSTALL_BINUTILS_SYMLINKS=OFF \
			-DLLVM_INCLUDE_EXAMPLES=OFF \
			-DLLVM_ENABLE_PIC=ON \
			-DLLVM_ENABLE_LTO=OFF \
			-DLLVM_INCLUDE_GO_TESTS=OFF \
			-DLLVM_INCLUDE_TESTS=OFF \
			-DLLVM_HOST_TRIPLE=$CTARGET \
			-DLLVM_DEFAULT_TARGET_TRIPLE=$CTARGET \
			-DLLVM_ENABLE_LIBXML2=OFF \
			-DLLVM_ENABLE_ZLIB=ON \
			-DLLVM_BUILD_LLVM_DYLIB=ON \
			-DLLVM_LINK_LLVM_DYLIB=ON \
			-DLLVM_OPTIMIZED_TABLEGEN=ON \
			-DLLVM_INCLUDE_BENCHMARKS=OFF \
			-DLLVM_INCLUDE_DOCS=OFF \
			-DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD=OFF \
			-DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD=OFF \
			-DLLVM_INSTALL_UTILS=ON \
			-DLIBCXX_ENABLE_FILESYSTEM=ON \
			-DLIBCXXABI_DISABLE_MERGE_WITH_LIBUNWINDER=OFF \
			-DLIBCXXABI_ENABLE_ASSERTIONS=ON \
                        -DLIBCXX_USE_COMPILER_RT=ON \
                        -DLIBCXX_HAS_MUSL_LIBC=ON \
                        -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
                        -DLIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY=ON \
                        -DLIBCXX_STATICALLY_LINK_ABI_IN_STATIC_LIBRARY=ON \
			-DLIBCXX_INSTALL_LIBRARY=OFF \
                        -DLIBCXXABI_USE_COMPILER_RT=ON \
                        -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
                        -DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
                        -DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY=YES \
			-DLIBCXXABI_ENABLE_SHARED=OFF \
			-DLIBCXXABI_ENABLE_STATIC=ON \
			-DLIBCXXABI_INSTALL_LIBRARY=OFF \
			-DLIBUNWIND_ENABLE_SHARED=OFF \
			-DLIBUNWIND_ENABLE_STATIC=ON \
			-DLIBUNWIND_INSTALL_LIBRARY=OFF \
			-DLIBUNWIND_USE_COMPILER_RT=ON \
			-DLLVM_ENABLE_LIBCXX=ON \
			-DSANITIZER_CXX_ABI='libc++' \
			-DSANITIZER_CXX_ABI_INTREE=ON \
			$srcdir/llvm-project-llvmorg-$pkgver/llvm
}

build() {
	cd $builddir
	ninja -j${JOBS}
}

package() {
	cd $builddir
	DESTDIR="$pkgdir" ninja install
}

binutils() {
	depends="llvm"
	mkdir -p ${subpkgdir}/usr/bin
	for t in addr2line ar as mt nm objcopy objdump ranlib readelf readobj size split strings strip dlltool lib; do
		mv -v ${pkgdir}/usr/bin/llvm-${t} ${subpkgdir}/usr/bin/llvm-${t}
	done
}


lld() {
	pkgdesc="$pkgname $pkgver"
	depends="llvm"
	mkdir -p ${subpkgdir}/usr/bin ${subpkgdir}/usr/lib
	for t in ld.lld lld ld64.lld lld-link wasm-ld; do
		mv -v ${pkgdir}/usr/bin/${t} ${subpkgdir}/usr/bin/${t}
	done
	mv -v ${pkgdir}/usr/lib/libLTO* ${subpkgdir}/usr/lib/
}

lldb() {
	pkgdesc="$pkgname $pkgver"
	depends="llvm-dev python3 python3-dev"
	mkdir -p ${subpkgdir}/usr/bin ${subpkgdir}/usr/lib/python3.7
	mv -v ${pkgdir}/usr/lib/liblldb* ${subpkgdir}/usr/lib/
	mv -v ${pkgdir}/usr/bin/lldb* ${subpkgdir}/usr/bin/
	mv -v ${pkgdir}/usr/lib/python3.7/* ${subpkgdir}/usr/lib/python3.7
	rm -rf ${pkgdir}/usr/lib/python3.7 ${subpkgdir}/usr/lib/python3.7/site-packages/six.py
}

llgo() {
	pkgdesc="$pkgname $pkgver"
	depends="llvm"
	mkdir -p ${subpkgdir}/usr/bin
	mv -v ${builddir}/bin/llvm-go ${subpkgdir}/usr/bin/
}

binutils_aalt() {
    depends="$depends aalt"
    pkgdesc="$pkgdesc (AAlt registration files)"
    install_if="aalt ${subpkgname%-aalt}=$pkgver-r$pkgrel"

    for p in addr2line ar mt nm objcopy objdump ranlib readelf readobj size split strings strip
    do
        DESTDIR=$subpkgdir aalt-bin -R -g llvm -p $p -f /usr/bin/llvm-$p
    done
}

lld_aalt() {
    depends="$depends aalt"
    pkgdesc="$pkgdesc (AAlt registration files)"
    install_if="aalt ${subpkgname%-aalt}=$pkgver-r$pkgrel"

    DESTDIR=$subpkgdir aalt-bin -R -g llvm -p ld -f /usr/bin/lld
}

b2sums="a729d37d96ba498cb865c6f708734dccb796b2caabb69167b9aa3b0e12c788f2a5980a048b99d5603da3d26af909fb31f406b4f4743cabae56c45f829a7bf695  llvmorg-10.0.0-rc1.tar.gz"
